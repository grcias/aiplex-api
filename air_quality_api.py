# -*- coding: utf-8 -*-
"""air_quality_api.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RWCioUFMDBSZfpfDbkbupBOfBbfs9LoO
"""

#!/usr/bin/env python3
"""
Air Quality API - Flask Backend
Original workflow: Webhook -> Geocoding -> AQI Data -> AI Insights -> Response
"""

import requests
import json
import sys
from typing import Dict, Any, Optional
from flask import Flask, request, jsonify
from flask_cors import CORS


class AirQualityAPI:
    def __init__(self):
        # API Keys (replace with your actual keys)
        self.airvisual_api_key = "ca06075f-c0f6-4de7-894d-9b3a5cf200ac"
        self.ninja_api_key = "Jd4Fdp8xahuKqHheeJJy8A==qz7BNKshLahRnChP"
        self.gemini_api_key = "AIzaSyA5JwWOkL0iL8m2y9I4lMM-Fxfe2GZlCwc"

        # API Endpoints
        self.nominatim_url = "https://nominatim.openstreetmap.org/search"
        self.airvisual_url = "http://api.airvisual.com/v2/nearest_city"
        self.ninja_url = "https://api.api-ninjas.com/v1/airquality"
        self.gemini_url = (
            f"https://generativelanguage.googleapis.com/v1beta/models/"
            f"gemini-2.5-flash-lite:generateContent?key={self.gemini_api_key}"
        )

    def get_coordinates(self, city: str) -> Optional[Dict[str, float]]:
        """Step 2: Get coordinates from city name using Nominatim"""
        try:
            params = {"q": city, "format": "json", "limit": 1}
            headers = {"User-Agent": "AirQualityApp/1.0 (me@example.com)"}
            response = requests.get(self.nominatim_url, params=params, headers=headers)
            response.raise_for_status()

            data = response.json()
            if data:
                return {"lat": float(data[0]["lat"]), "lon": float(data[0]["lon"])}
            return None
        except requests.RequestException as e:
            print(f"Error getting coordinates: {e}")
            return None

    def get_airvisual_data(self, lat: float, lon: float) -> Optional[Dict[str, Any]]:
        """Step 3: Get AQI data from AirVisual API"""
        try:
            params = {"lat": lat, "lon": lon, "key": self.airvisual_api_key}
            response = requests.get(self.airvisual_url, params=params)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error getting AirVisual data: {e}")
            return None

    def get_ninja_pollutants(self, lat: float, lon: float) -> Optional[Dict[str, Any]]:
        """Step 4: Get detailed pollutant data from API Ninjas"""
        try:
            params = {"lat": lat, "lon": lon}
            headers = {"x-api-key": self.ninja_api_key}
            response = requests.get(self.ninja_url, params=params, headers=headers)
            response.raise_for_status()
            return response.json()
        except requests.RequestException as e:
            print(f"Error getting pollutant data: {e}")
            return None

    def categorize_aqi(self, aqi_value: int) -> str:
        """Step 5: Categorize AQI value"""
        if aqi_value <= 50:
            return "Good"
        elif aqi_value <= 100:
            return "Moderate"
        elif aqi_value <= 200:
            return "Unhealthy"
        elif aqi_value <= 300:
            return "Very Unhealthy"
        else:
            return "Hazardous"

    def generate_ai_insights(self, category: str) -> Dict[str, str]:
        """Step 6: Generate AI insights using Gemini API"""
        try:
            payload = {
                "contents": [
                    {
                        "parts": [
                            {
                                "text": (
                                    f"Generate a JSON object only with fields 'tip', "
                                    f"'fun_fact', and 'challenge' based on this air quality "
                                    f"category: {category}. "
                                    f"'tip': start with a friendly phrase (like 'Hey' or 'Reminder'), "
                                    f"mention the {category} explicitly, give clear advice, max 12 words. "
                                    f"'fun_fact': write in style 'Did you know? ...', interesting and positive, "
                                    f"1-2 sentences, include 1-2 fun emojis. "
                                    f"'challenge': write as a small daily task the user can do, "
                                    f"actionable and encouraging, include 1 motivating emoji. "
                                    f"Output only JSON, no explanations."
                                )
                            }
                        ]
                    }
                ],
                "generationConfig": {"responseMimeType": "application/json"},
            }

            headers = {"Content-Type": "application/json"}
            response = requests.post(self.gemini_url, json=payload, headers=headers)
            response.raise_for_status()

            data = response.json()
            insight_text = data["candidates"][0]["content"]["parts"][0]["text"]
            return json.loads(insight_text)

        except (requests.RequestException, json.JSONDecodeError, KeyError) as e:
            print(f"Error generating AI insights: {e}")
            return {
                "tip": f"Hey! Air quality is {category} today. Stay informed!",
                "fun_fact": "Did you know? Trees can improve air quality! ðŸŒ³",
                "challenge": "Take a walk in a green area today! ðŸš¶",
            }

    def process_air_quality_request(self, city: str) -> Dict[str, Any]:
        """Main processing function"""
        print(f"Processing air quality request for: {city}")

        coords = self.get_coordinates(city)
        if not coords:
            return {"success": False, "error": "Could not find coordinates"}

        airvisual_data = self.get_airvisual_data(coords["lat"], coords["lon"])
        if not airvisual_data or "data" not in airvisual_data:
            return {"success": False, "error": "Could not retrieve air quality data"}

        pollutant_data = self.get_ninja_pollutants(coords["lat"], coords["lon"])
        aqi_value = airvisual_data["data"]["current"]["pollution"]["aqius"]
        category = self.categorize_aqi(aqi_value)
        insights = self.generate_ai_insights(category)

        response_data = {
            "success": True,
            "city": airvisual_data["data"]["city"],
            "country": airvisual_data["data"]["country"],
            "coords": coords,
            "aqi": aqi_value,
            "category": category,
            "weather": {
                "temp": airvisual_data["data"]["current"]["weather"]["tp"],
                "humidity": airvisual_data["data"]["current"]["weather"]["hu"],
                "wind": airvisual_data["data"]["current"]["weather"]["ws"],
            },
            "insight": insights,
        }

        if pollutant_data:
            response_data["pollutants"] = {
                "CO": pollutant_data.get("CO", {}).get("concentration", 0),
                "NO2": pollutant_data.get("NO2", {}).get("concentration", 0),
                "O3": pollutant_data.get("O3", {}).get("concentration", 0),
                "SO2": pollutant_data.get("SO2", {}).get("concentration", 0),
                "PM2.5": pollutant_data.get("PM2.5", {}).get("concentration", 0),
                "PM10": pollutant_data.get("PM10", {}).get("concentration", 0),
            }

        return response_data


# Flask App Setup
app = Flask(__name__)
CORS(app)
api = AirQualityAPI()


@app.route('/', methods=['GET'])
def home():
    return jsonify({"status": "Air Quality API is running ðŸš€"})


@app.route("/air-quality", methods=["POST"])
def air_quality_webhook():
    data = request.get_json()
    city = data.get("city", "")

    if not city:
        return jsonify({"success": False, "error": "City parameter is required"}), 400

    result = api.process_air_quality_request(city)
    return jsonify(result)


if __name__ == "__main__":
    # For local dev
    app.run(debug=True, port=8081)